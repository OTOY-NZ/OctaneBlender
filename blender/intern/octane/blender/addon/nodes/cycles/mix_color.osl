/*
    Shader: Mix Color
    Author: Lino Grandi
    Description: This shader performs various blending modes between two colors
                 based on a specified factor and blending mode.
*/

float color_srgb_to_scene_linear(float c)
{
  if (c < 0.04045) {
    return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
  }
  else {
    return pow((c + 0.055) * (1.0 / 1.055), 2.4);
  }
}

float color_scene_linear_to_srgb(float c)
{
  if (c < 0.0031308) {
    return (c < 0.0) ? 0.0 : c * 12.92;
  }
  else {
    return 1.055 * pow(c, 1.0 / 2.4) - 0.055;
  }
}

color color_srgb_to_scene_linear(color c)
{
  return color(color_srgb_to_scene_linear(c[0]),
               color_srgb_to_scene_linear(c[1]),
               color_srgb_to_scene_linear(c[2]));
}

color color_scene_linear_to_srgb(color c)
{
  return color(color_scene_linear_to_srgb(c[0]),
               color_scene_linear_to_srgb(c[1]),
               color_scene_linear_to_srgb(c[2]));
}

color color_unpremultiply(color c, float alpha)
{
  if (alpha != 1.0 && alpha != 0.0) {
    return c / alpha;
  }

  return c;
}

/* Color Operations */

color xyY_to_xyz(float x, float y, float Y)
{
  float X, Z;

  if (y != 0.0) {
    X = (x / y) * Y;
  }
  else {
    X = 0.0;
  }

  if (y != 0.0 && Y != 0.0) {
    Z = ((1.0 - x - y) / y) * Y;
  }
  else {
    Z = 0.0;
  }

  return color(X, Y, Z);
}

color xyz_to_rgb(float x, float y, float z)
{
  return color(3.240479 * x + -1.537150 * y + -0.498535 * z,
               -0.969256 * x + 1.875991 * y + 0.041556 * z,
               0.055648 * x + -0.204043 * y + 1.057311 * z);
}

color rgb_to_hsv(color rgb)
{
  float cmax, cmin, h, s, v, cdelta;
  color c;

  cmax = max(rgb[0], max(rgb[1], rgb[2]));
  cmin = min(rgb[0], min(rgb[1], rgb[2]));
  cdelta = cmax - cmin;

  v = cmax;

  if (cmax != 0.0) {
    s = cdelta / cmax;
  }
  else {
    s = 0.0;
    h = 0.0;
  }

  if (s == 0.0) {
    h = 0.0;
  }
  else {
    c = (color(cmax, cmax, cmax) - rgb) / cdelta;

    if (rgb[0] == cmax) {
      h = c[2] - c[1];
    }
    else if (rgb[1] == cmax) {
      h = 2.0 + c[0] - c[2];
    }
    else {
      h = 4.0 + c[1] - c[0];
    }

    h /= 6.0;

    if (h < 0.0) {
      h += 1.0;
    }
  }

  return color(h, s, v);
}

color hsv_to_rgb(color hsv)
{
  float i, f, p, q, t, h, s, v;
  color rgb;

  h = hsv[0];
  s = hsv[1];
  v = hsv[2];

  if (s == 0.0) {
    rgb = color(v, v, v);
  }
  else {
    if (h == 1.0) {
      h = 0.0;
    }

    h *= 6.0;
    i = floor(h);
    f = h - i;
    rgb = color(f, f, f);
    p = v * (1.0 - s);
    q = v * (1.0 - (s * f));
    t = v * (1.0 - (s * (1.0 - f)));

    if (i == 0.0) {
      rgb = color(v, t, p);
    }
    else if (i == 1.0) {
      rgb = color(q, v, p);
    }
    else if (i == 2.0) {
      rgb = color(p, v, t);
    }
    else if (i == 3.0) {
      rgb = color(p, q, v);
    }
    else if (i == 4.0) {
      rgb = color(t, p, v);
    }
    else {
      rgb = color(v, p, q);
    }
  }

  return rgb;
}

color rgb_to_hsl(color rgb)
{
  float cmax, cmin, h, s, l;

  cmax = max(rgb[0], max(rgb[1], rgb[2]));
  cmin = min(rgb[0], min(rgb[1], rgb[2]));
  l = min(1.0, (cmax + cmin) / 2.0);

  if (cmax == cmin) {
    h = s = 0.0; /* achromatic */
  }
  else {
    float cdelta = cmax - cmin;
    s = l > 0.5 ? cdelta / (2.0 - cmax - cmin) : cdelta / (cmax + cmin);
    if (cmax == rgb[0]) {
      h = (rgb[1] - rgb[2]) / cdelta + (rgb[1] < rgb[2] ? 6.0 : 0.0);
    }
    else if (cmax == rgb[1]) {
      h = (rgb[2] - rgb[0]) / cdelta + 2.0;
    }
    else {
      h = (rgb[0] - rgb[1]) / cdelta + 4.0;
    }
  }
  h /= 6.0;

  return color(h, s, l);
}

color hsl_to_rgb(color hsl)
{
  float nr, ng, nb, chroma, h, s, l;

  h = hsl[0];
  s = hsl[1];
  l = hsl[2];

  nr = abs(h * 6.0 - 3.0) - 1.0;
  ng = 2.0 - abs(h * 6.0 - 2.0);
  nb = 2.0 - abs(h * 6.0 - 4.0);

  nr = clamp(nr, 0.0, 1.0);
  nb = clamp(nb, 0.0, 1.0);
  ng = clamp(ng, 0.0, 1.0);

  chroma = (1.0 - abs(2.0 * l - 1.0)) * s;

  return color((nr - 0.5) * chroma + l, (ng - 0.5) * chroma + l, (nb - 0.5) * chroma + l);
}

// #include "node_color_blend.h"

color node_mix_blend(float t, color col1, color col2)
{
  return mix(col1, col2, t);
}

color node_mix_add(float t, color col1, color col2)
{
  return mix(col1, col1 + col2, t);
}

color node_mix_mul(float t, color col1, color col2)
{
  return mix(col1, col1 * col2, t);
}

color node_mix_screen(float t, color col1, color col2)
{
  float tm = 1.0 - t;

  return color(1.0) - (color(tm) + t * (color(1.0) - col2)) * (color(1.0) - col1);
}

color node_mix_overlay(float t, color col1, color col2)
{
  float tm = 1.0 - t;

  color outcol = col1;

  if (outcol[0] < 0.5) {
    outcol[0] *= tm + 2.0 * t * col2[0];
  }
  else {
    outcol[0] = 1.0 - (tm + 2.0 * t * (1.0 - col2[0])) * (1.0 - outcol[0]);
  }

  if (outcol[1] < 0.5) {
    outcol[1] *= tm + 2.0 * t * col2[1];
  }
  else {
    outcol[1] = 1.0 - (tm + 2.0 * t * (1.0 - col2[1])) * (1.0 - outcol[1]);
  }

  if (outcol[2] < 0.5) {
    outcol[2] *= tm + 2.0 * t * col2[2];
  }
  else {
    outcol[2] = 1.0 - (tm + 2.0 * t * (1.0 - col2[2])) * (1.0 - outcol[2]);
  }

  return outcol;
}

color node_mix_sub(float t, color col1, color col2)
{
  return mix(col1, col1 - col2, t);
}

color node_mix_div(float t, color col1, color col2)
{
  float tm = 1.0 - t;

  color outcol = col1;

  if (col2[0] != 0.0) {
    outcol[0] = tm * outcol[0] + t * outcol[0] / col2[0];
  }
  if (col2[1] != 0.0) {
    outcol[1] = tm * outcol[1] + t * outcol[1] / col2[1];
  }
  if (col2[2] != 0.0) {
    outcol[2] = tm * outcol[2] + t * outcol[2] / col2[2];
  }

  return outcol;
}

color node_mix_diff(float t, color col1, color col2)
{
  return mix(col1, abs(col1 - col2), t);
}

color node_mix_exclusion(float t, color col1, color col2)
{
  return max(mix(col1, col1 + col2 - 2.0 * col1 * col2, t), 0.0);
}

color node_mix_dark(float t, color col1, color col2)
{
  return mix(col1, min(col1, col2), t);
}

color node_mix_light(float t, color col1, color col2)
{
  return mix(col1, max(col1, col2), t);
}

color node_mix_dodge(float t, color col1, color col2)
{
  color outcol = col1;

  if (outcol[0] != 0.0) {
    float tmp = 1.0 - t * col2[0];
    if (tmp <= 0.0) {
      outcol[0] = 1.0;
    }
    else if ((tmp = outcol[0] / tmp) > 1.0) {
      outcol[0] = 1.0;
    }
    else {
      outcol[0] = tmp;
    }
  }
  if (outcol[1] != 0.0) {
    float tmp = 1.0 - t * col2[1];
    if (tmp <= 0.0) {
      outcol[1] = 1.0;
    }
    else if ((tmp = outcol[1] / tmp) > 1.0) {
      outcol[1] = 1.0;
    }
    else {
      outcol[1] = tmp;
    }
  }
  if (outcol[2] != 0.0) {
    float tmp = 1.0 - t * col2[2];
    if (tmp <= 0.0) {
      outcol[2] = 1.0;
    }
    else if ((tmp = outcol[2] / tmp) > 1.0) {
      outcol[2] = 1.0;
    }
    else {
      outcol[2] = tmp;
    }
  }

  return outcol;
}

color node_mix_burn(float t, color col1, color col2)
{
  float tmp, tm = 1.0 - t;

  color outcol = col1;

  tmp = tm + t * col2[0];
  if (tmp <= 0.0) {
    outcol[0] = 0.0;
  }
  else if ((tmp = (1.0 - (1.0 - outcol[0]) / tmp)) < 0.0) {
    outcol[0] = 0.0;
  }
  else if (tmp > 1.0) {
    outcol[0] = 1.0;
  }
  else {
    outcol[0] = tmp;
  }

  tmp = tm + t * col2[1];
  if (tmp <= 0.0) {
    outcol[1] = 0.0;
  }
  else if ((tmp = (1.0 - (1.0 - outcol[1]) / tmp)) < 0.0) {
    outcol[1] = 0.0;
  }
  else if (tmp > 1.0) {
    outcol[1] = 1.0;
  }
  else {
    outcol[1] = tmp;
  }

  tmp = tm + t * col2[2];
  if (tmp <= 0.0) {
    outcol[2] = 0.0;
  }
  else if ((tmp = (1.0 - (1.0 - outcol[2]) / tmp)) < 0.0) {
    outcol[2] = 0.0;
  }
  else if (tmp > 1.0) {
    outcol[2] = 1.0;
  }
  else {
    outcol[2] = tmp;
  }

  return outcol;
}

color node_mix_hue(float t, color col1, color col2)
{
  color outcol = col1;
  color hsv2 = rgb_to_hsv(col2);

  if (hsv2[1] != 0.0) {
    color hsv = rgb_to_hsv(outcol);
    hsv[0] = hsv2[0];
    color tmp = hsv_to_rgb(hsv);

    outcol = mix(outcol, tmp, t);
  }

  return outcol;
}

color node_mix_sat(float t, color col1, color col2)
{
  float tm = 1.0 - t;

  color outcol = col1;

  color hsv = rgb_to_hsv(outcol);

  if (hsv[1] != 0.0) {
    color hsv2 = rgb_to_hsv(col2);

    hsv[1] = tm * hsv[1] + t * hsv2[1];
    outcol = hsv_to_rgb(hsv);
  }

  return outcol;
}

color node_mix_val(float t, color col1, color col2)
{
  float tm = 1.0 - t;

  color hsv = rgb_to_hsv(col1);
  color hsv2 = rgb_to_hsv(col2);

  hsv[2] = tm * hsv[2] + t * hsv2[2];

  return hsv_to_rgb(hsv);
}

color node_mix_color(float t, color col1, color col2)
{
  color outcol = col1;
  color hsv2 = rgb_to_hsv(col2);

  if (hsv2[1] != 0.0) {
    color hsv = rgb_to_hsv(outcol);
    hsv[0] = hsv2[0];
    hsv[1] = hsv2[1];
    color tmp = hsv_to_rgb(hsv);

    outcol = mix(outcol, tmp, t);
  }

  return outcol;
}

color node_mix_soft(float t, color col1, color col2)
{
  float tm = 1.0 - t;

  color one = color(1.0);
  color scr = one - (one - col2) * (one - col1);

  return tm * col1 + t * ((one - col1) * col2 * col1 + col1 * scr);
}

color node_mix_linear(float t, color col1, color col2)
{
  color outcol = col1;

  if (col2[0] > 0.5) {
    outcol[0] = col1[0] + t * (2.0 * (col2[0] - 0.5));
  }
  else {
    outcol[0] = col1[0] + t * (2.0 * (col2[0]) - 1.0);
  }

  if (col2[1] > 0.5) {
    outcol[1] = col1[1] + t * (2.0 * (col2[1] - 0.5));
  }
  else {
    outcol[1] = col1[1] + t * (2.0 * (col2[1]) - 1.0);
  }

  if (col2[2] > 0.5) {
    outcol[2] = col1[2] + t * (2.0 * (col2[2] - 0.5));
  }
  else {
    outcol[2] = col1[2] + t * (2.0 * (col2[2]) - 1.0);
  }

  return outcol;
}

color node_mix_clamp(color col)
{
  color outcol = col;

  outcol[0] = clamp(col[0], 0.0, 1.0);
  outcol[1] = clamp(col[1], 0.0, 1.0);
  outcol[2] = clamp(col[2], 0.0, 1.0);

  return outcol;
}

// #include "stdcycles.h"

shader node_mix_color(int blend_type = 0,
                      int use_clamp = 0,
                      int use_clamp_result = 0,
                      float Factor = 0.5,
                      color A = 0.0,
                      color B = 0.0,
                      output color Result = 0.0)
{
  float t = (use_clamp) ? clamp(Factor, 0.0, 1.0) : Factor;

if (blend_type == 0)  // Mix
    Result = mix(A, B, t);
if (blend_type == 1)  // Add
    Result = node_mix_add(t, A, B);
if (blend_type == 2)  // Multiply
    Result = node_mix_mul(t, A, B);
if (blend_type == 3)  // Screen
    Result = node_mix_screen(t, A, B);
if (blend_type == 4)  // Overlay
    Result = node_mix_overlay(t, A, B);
if (blend_type == 5)  // Subtract
    Result = node_mix_sub(t, A, B);
if (blend_type == 6)  // Divide
    Result = node_mix_div(t, A, B);
if (blend_type == 7)  // Difference
    Result = node_mix_diff(t, A, B);
if (blend_type == 8)  // Exclusion
    Result = node_mix_exclusion(t, A, B);
if (blend_type == 9)  // Darken
    Result = node_mix_dark(t, A, B);
if (blend_type == 10) // Lighten
    Result = node_mix_light(t, A, B);
if (blend_type == 11) // Dodge
    Result = node_mix_dodge(t, A, B);
if (blend_type == 12) // Burn
    Result = node_mix_burn(t, A, B);
if (blend_type == 13) // Hue
    Result = node_mix_hue(t, A, B);
if (blend_type == 14) // Saturation
    Result = node_mix_sat(t, A, B);
if (blend_type == 15) // Value
    Result = node_mix_val(t, A, B);
if (blend_type == 16) // Color
    Result = node_mix_color(t, A, B);
if (blend_type == 17) // Soft Light
    Result = node_mix_soft(t, A, B);
if (blend_type == 18) // Linear Light
    Result = node_mix_linear(t, A, B);

  if (use_clamp_result)
    Result = clamp(Result, 0.0, 1.0);
}
