// #include "node_math.h"

float safe_divide(float a, float b)
{
  return (b != 0.0) ? a / b : 0.0;
}

vector safe_divide(vector a, vector b)
{
  return vector((b[0] != 0.0) ? a[0] / b[0] : 0.0,
                (b[1] != 0.0) ? a[1] / b[1] : 0.0,
                (b[2] != 0.0) ? a[2] / b[2] : 0.0);
}

float safe_modulo(float a, float b)
{
  return (b != 0.0) ? fmod(a, b) : 0.0;
}

float safe_floored_modulo(float a, float b)
{
  return (b != 0.0) ? a - floor(a / b) * b : 0.0;
}

float fract(float a)
{
  return a - floor(a);
}

/* See: https://www.iquilezles.org/www/articles/smin/smin.htm. */
float smoothmin(float a, float b, float c)
{
  if (c != 0.0) {
    float h = max(c - abs(a - b), 0.0) / c;
    return min(a, b) - h * h * h * c * (1.0 / 6.0);
  }
  else {
    return min(a, b);
  }
}

float pingpong(float a, float b)
{
  return (b != 0.0) ? abs(fract((a - b) / (b * 2.0)) * b * 2.0 - b) : 0.0;
}

float safe_sqrt(float a)
{
  return (a > 0.0) ? sqrt(a) : 0.0;
}

float safe_log(float a, float b)
{
  return (a > 0.0 && b > 0.0) ? log(a) / log(b) : 0.0;
}

vector project(vector v, vector v_proj)
{
  float lenSquared = dot(v_proj, v_proj);
  return (lenSquared != 0.0) ? (dot(v, v_proj) / lenSquared) * v_proj : vector(0.0);
}

vector snap(vector a, vector b)
{
  return floor(safe_divide(a, b)) * b;
}

/* Adapted from GODOT-engine math_funcs.h. */
float wrap(float value, float max, float min)
{
  float range = max - min;
  return (range != 0.0) ? value - (range * floor((value - min) / range)) : min;
}

point wrap(point value, point max, point min)
{
  return point(wrap(value[0], max[0], min[0]),
               wrap(value[1], max[1], min[1]),
               wrap(value[2], max[2], min[2]));
}

/* Built in OSL faceforward is `(dot(I, Nref) > 0) ? -N : N;` which is different to
 * GLSL `dot(Nref, I) < 0 ? N : -N` for zero values. */
point compatible_faceforward(point vec, point incident, point reference)
{
  return dot(reference, incident) < 0.0 ? vec : -vec;
}

matrix euler_to_mat(point euler)
{
  float cx = cos(euler[0]);
  float cy = cos(euler[1]);
  float cz = cos(euler[2]);
  float sx = sin(euler[0]);
  float sy = sin(euler[1]);
  float sz = sin(euler[2]);
  matrix mat = matrix(1.0);
  mat[0][0] = cy * cz;
  mat[0][1] = cy * sz;
  mat[0][2] = -sy;
  mat[1][0] = sy * sx * cz - cx * sz;
  mat[1][1] = sy * sx * sz + cx * cz;
  mat[1][2] = cy * sx;
  +mat[2][0] = sy * cx * cz + sx * sz;
  mat[2][1] = sy * cx * sz - sx * cz;
  mat[2][2] = cy * cx;
  return mat;
}


/* OSL asin, acos, and pow functions are safe by default. */
shader node_math(int math_type = 0,
                 int use_clamp = 0,
                 float Value1 = 0.5,
                 float Value2 = 0.5,
                 float Value3 = 0.5,
                 output float Value = 0.0)
{
    if (math_type == 0)  // Add
        Value = Value1 + Value2;
    else if (math_type == 1)  // Subtract
        Value = Value1 - Value2;
    else if (math_type == 2)  // Multiply
        Value = Value1 * Value2;
    else if (math_type == 3)  // Divide
        Value = safe_divide(Value1, Value2);
    else if (math_type == 4)  // Power
        Value = pow(Value1, Value2);
    else if (math_type == 5)  // Logarithm
        Value = safe_log(Value1, Value2);
    else if (math_type == 6)  // Sqrt (Square Root)
        Value = safe_sqrt(Value1);
    else if (math_type == 7)  // InverseSqrt (Inverse Square Root)
        Value = inversesqrt(Value1);
    else if (math_type == 8)  // Absolute (Absolute Value)
        Value = fabs(Value1);
    else if (math_type == 9)  // Radians (Convert to Radians)
        Value = radians(Value1);
    else if (math_type == 10)  // Degrees (Convert to Degrees)
        Value = degrees(Value1);
    else if (math_type == 11)  // Minimum
        Value = min(Value1, Value2);
    else if (math_type == 12)  // Maximum
        Value = max(Value1, Value2);
    else if (math_type == 13)  // Less Than (Comparison)
        Value = Value1 < Value2;
    else if (math_type == 14)  // Greater Than (Comparison)
        Value = Value1 > Value2;
    else if (math_type == 15)  // Round (Round to Nearest Integer)
        Value = floor(Value1 + 0.5);
    else if (math_type == 16)  // Floor (Floor Function)
        Value = floor(Value1);
    else if (math_type == 17)  // Ceil (Ceiling Function)
        Value = ceil(Value1);
    else if (math_type == 18)  // Fraction (Fractional Part)
        Value = Value1 - floor(Value1);
    else if (math_type == 19)  // Modulo (Modulo Operation)
        Value = safe_modulo(Value1, Value2);
    else if (math_type == 20)  // Floored Modulo
        Value = safe_floored_modulo(Value1, Value2);
    else if (math_type == 21)  // Trunc (Truncate)
        Value = trunc(Value1);
    else if (math_type == 22)  // Snap (Snap to Interval)
        Value = floor(safe_divide(Value1, Value2)) * Value2;
    else if (math_type == 23)  // Wrap (Wrap Value)
        Value = wrap(Value1, Value2, Value3);
    else if (math_type == 24)  // Pingpong (Pingpong Function)
        Value = pingpong(Value1, Value2);
    else if (math_type == 25)  // Sine (Sine Function)
        Value = sin(Value1);
    else if (math_type == 26)  // Cosine (Cosine Function)
        Value = cos(Value1);
    else if (math_type == 27)  // Tangent (Tangent Function)
        Value = tan(Value1);
    else if (math_type == 28)  // Sinh (Hyperbolic Sine)
        Value = sinh(Value1);
    else if (math_type == 29)  // Cosh (Hyperbolic Cosine)
        Value = cosh(Value1);
    else if (math_type == 30)  // Tanh (Hyperbolic Tangent)
        Value = tanh(Value1);
    else if (math_type == 31)  // Arcsine (Arcsine Function)
        Value = asin(Value1);
    else if (math_type == 32)  // Arccosine (Arccosine Function)
        Value = acos(Value1);
    else if (math_type == 33)  // Arctangent (Arctangent Function)
        Value = atan(Value1);
    else if (math_type == 34)  // Arctan2 (Arctangent2 Function)
        Value = atan2(Value1, Value2);
    else if (math_type == 35)  // Sign (Sign Function)
        Value = sign(Value1);
    else if (math_type == 36)  // Exponent (Exponential Function)
        Value = exp(Value1);
    else if (math_type == 37)  // Compare (Compare Values)
        Value = ((Value1 == Value2) || (abs(Value1 - Value2) <= max(Value3, 1e-5))) ? 1.0 : 0.0;
    else if (math_type == 38)  // Multiply Add (Multiply and Add)
        Value = Value1 * Value2 + Value3;
    else if (math_type == 39)  // Smoothmin (Smooth Minimum)
        Value = smoothmin(Value1, Value2, Value3);
    else if (math_type == 40)  // Smoothmax (Smooth Maximum)
        Value = -(smoothmin(-Value1, -Value2, Value3));
    else {
        // Handle unexpected math_type
    }
    if (use_clamp != 0) {
        Value = clamp(Value, 0.0, 1.0);
    }
}
